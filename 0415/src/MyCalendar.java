import java.util.Scanner;

public class MyCalendar {
	
	
	// python 함수 형식, []로 묶은 내용은 생략 가능하다.
	// def 함수이름([인수, ...]) : 
	// 		함수가 실행할 문장
	//		...
	// 		[return 값]
	
	
	
	// only JAVA (+ C++)
	// 메소드 형식, []로 묶은 내용은 생략 가능하다.
	// [접근 권한 지정자] [static] 리턴타입 메소드이름([인수, ...]) { // 리턴타입 : 일 시키고 출력되는 데이터의 타입
	//  	메소드가 실행할 문장;
	//		...;
	//		[return 값;]
	// }
	
	// 클래스 : 설계도
	// 마트 > 라면 > 라면봉지 밀봉(재료 만질 수 없게) = private > 라면 재료(데이터)
	
	
	// 접근 권한 지정자 : 데이터 변수를 외부에서 접근할 수 있/없 
	// private : 현재 클래스 외부에서 접근할 수 없다. 내부에서만 사용 가능 (정보은닉)(encapsulation) (변수)(데이터)
				// ( C : struct(구조체, 데이터만 기억) 라면 중에서 라면사리~ ) 사용자 지정/정의 자료형 ) 구조체 + 메소드 (사리면+조리법) = 클래
				// 한 가지의 자료형으로 구성되지 않음, 여러 데이터타입으로 구성됨 : 여러 데이터타입을 구성하는 게 사용자지정자료 (record, row, filed)
	
	// protected : 상속 : 부모 클래스에서 생성한 변수, 메소드 > 자식 클래스에서 사용 가능 (현재 클래스와 현재 클래스를 상속받은 자식 클래스에서만 접근할 수 있다.)
	
	// package : 예전에는 default라 불렀다, 접근 권한 생략시 package 권한으로 취급된다.
	// 같은 패키지에서는 public처럼 사용되고 다른 패키지에서는 private처럼 사용된다. 
	// 기출 (변수 앞에 접근권한자 없으면 패키지 권한자이다) / 내 자바 파일 src > default package
	
	// public : 현재 클래스 내부, 외부 어디에서나 자유롭게 접근할 수 있다. (데이터가 정확하다면 누가 실행해도 결과는 같다.) (기능)(메소드)
	
	
	// static (정적 메소드)는 메소드를 메소드를 선언한 클래스의 객체를 생성하지 않고 클래스 이름에 "."을 찍어 실행할 수 있다.
	// static 메소드는 static 메소드만 실행할 수 있다. 
	// >> 자주 사용하는 메소드는 static으로 만들어 사용하면 편리하당
	
	// 리턴 타입은 메소드가 실행되고 난 후 결과를 돌려줄 때 결과의 자료형을 적어준다.
	// 경우에 따라 메소드 실행 결과가 없을 수 있다. 
	// 이럴 경우 return을 생략할 수 있으며 리턴 타입에는 void라고 쓰면 된다. = return값 없음!
	
	// 윤년 / 평년 판별 메소드
	// 년도를 인수로 넘겨받아 윤년, 평년을 판단해서 윤년이면 true, 평년이면 false를 리턴하는 메소드 // 논리값으로 리턴되는 메소드 이름은 is로 시
	
	public static boolean isLeapYear(int year) { // 카멜표기법 2번째 부터 단어 첫글자 대문자 // is_leap_your 스네이크 표기법 (json) 이런거 틀리면 억울행 
	
		return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;

		
	}
	
	
	
	// static 메소드는 static 메소드만 실행할 수 있다. 
	// static 붙은 main 을 프로그램이 실행되기 전에 미리 메모리로 옮겨랏 
	public static void main(String[]args) {
		
		Scanner scanner = new Scanner(System.in);
		
		
		System.out.print("달력을 출력할 년, 월을 입력하세요 : ");
		
		int year = scanner.nextInt();
		int month = scanner.nextInt();
		
		// 윤년 평년 / 각 달의 마지막 날 / ??? / % 7로 나눈 후 나머지 : (모듈 4개) 
		// 모듈 : 프로그램을 이루는 부품들 
		// 좋은 모듈이 되기 위한 방법 (결합도 낮 /응집도 높 ) 독립성 높여야 / 세기별로 ***순서대로 기능(특징)을 암기*** 
		
		// 통신 osi 7 layer : 순서 : 상위 / 하위 , ip protocol / tcp (행군, 대량) / udp(해쳐모이자, 토렌트, 웹하드(그리드스위치)) 차이
		
		
		// 함수/메소드 호출할 때 이름으로 호출
		// 호출된 메소드가 실행이 완료되면 호출된 위치로 return 값을 가지고 돌아온다.
		
		
		System.out.println(isLeapYear(year)); // isLeapYear() 함수가 있는 메소드로 이동 > 메소드 실행, 리턴값 생성 > main으로 돌아와 return값 대입 
		
		
		//하나의 클래스 안에 여러 메소드가 있음
		
		//가장 먼저 실행하는 메소드는 main임 자바 파이썬 씨 동일
		
		
		// 내일 메소드, 클래스 
		
		
		
		
		
		
		
		
	}
}
